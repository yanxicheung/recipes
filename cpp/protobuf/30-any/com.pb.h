// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_2eproto;
namespace com {
class Head;
class HeadDefaultTypeInternal;
extern HeadDefaultTypeInternal _Head_default_instance_;
class TestMsg;
class TestMsgDefaultTypeInternal;
extern TestMsgDefaultTypeInternal _TestMsg_default_instance_;
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::Head* Arena::CreateMaybeMessage<::com::Head>(Arena*);
template<> ::com::TestMsg* Arena::CreateMaybeMessage<::com::TestMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {

// ===================================================================

class TestMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.TestMsg) */ {
 public:
  inline TestMsg() : TestMsg(nullptr) {}
  virtual ~TestMsg();

  TestMsg(const TestMsg& from);
  TestMsg(TestMsg&& from) noexcept
    : TestMsg() {
    *this = ::std::move(from);
  }

  inline TestMsg& operator=(const TestMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMsg& operator=(TestMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMsg& default_instance();

  static inline const TestMsg* internal_default_instance() {
    return reinterpret_cast<const TestMsg*>(
               &_TestMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestMsg& a, TestMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMsg* New() const final {
    return CreateMaybeMessage<TestMsg>(nullptr);
  }

  TestMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMsg& from);
  void MergeFrom(const TestMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.TestMsg";
  }
  protected:
  explicit TestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2eproto);
    return ::descriptor_table_com_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .com.Head head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::com::Head& head() const;
  ::com::Head* release_head();
  ::com::Head* mutable_head();
  void set_allocated_head(::com::Head* head);
  private:
  const ::com::Head& _internal_head() const;
  ::com::Head* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::com::Head* head);
  ::com::Head* unsafe_arena_release_head();

  // .google.protobuf.Any body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const PROTOBUF_NAMESPACE_ID::Any& body() const;
  PROTOBUF_NAMESPACE_ID::Any* release_body();
  PROTOBUF_NAMESPACE_ID::Any* mutable_body();
  void set_allocated_body(PROTOBUF_NAMESPACE_ID::Any* body);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_body() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      PROTOBUF_NAMESPACE_ID::Any* body);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:com.TestMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::Head* head_;
  PROTOBUF_NAMESPACE_ID::Any* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// -------------------------------------------------------------------

class Head PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.Head) */ {
 public:
  inline Head() : Head(nullptr) {}
  virtual ~Head();

  Head(const Head& from);
  Head(Head&& from) noexcept
    : Head() {
    *this = ::std::move(from);
  }

  inline Head& operator=(const Head& from) {
    CopyFrom(from);
    return *this;
  }
  inline Head& operator=(Head&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Head& default_instance();

  static inline const Head* internal_default_instance() {
    return reinterpret_cast<const Head*>(
               &_Head_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Head& a, Head& b) {
    a.Swap(&b);
  }
  inline void Swap(Head* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Head* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Head* New() const final {
    return CreateMaybeMessage<Head>(nullptr);
  }

  Head* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Head>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Head& from);
  void MergeFrom(const Head& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Head* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.Head";
  }
  protected:
  explicit Head(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_com_2eproto);
    return ::descriptor_table_com_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kTokenFieldNumber = 2,
    kErrFieldNumber = 3,
    kLenFieldNumber = 4,
    kSerialFieldNumber = 5,
    kContextFieldNumber = 6,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string err = 3;
  void clear_err();
  const std::string& err() const;
  void set_err(const std::string& value);
  void set_err(std::string&& value);
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  std::string* mutable_err();
  std::string* release_err();
  void set_allocated_err(std::string* err);
  private:
  const std::string& _internal_err() const;
  void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // fixed32 len = 4;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 serial = 5;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 context = 6;
  void clear_context();
  ::PROTOBUF_NAMESPACE_ID::uint64 context() const;
  void set_context(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_context() const;
  void _internal_set_context(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.Head)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  ::PROTOBUF_NAMESPACE_ID::uint32 len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serial_;
  ::PROTOBUF_NAMESPACE_ID::uint64 context_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_com_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestMsg

// .com.Head head = 1;
inline bool TestMsg::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool TestMsg::has_head() const {
  return _internal_has_head();
}
inline void TestMsg::clear_head() {
  if (GetArena() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::com::Head& TestMsg::_internal_head() const {
  const ::com::Head* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::Head&>(
      ::com::_Head_default_instance_);
}
inline const ::com::Head& TestMsg::head() const {
  // @@protoc_insertion_point(field_get:com.TestMsg.head)
  return _internal_head();
}
inline void TestMsg::unsafe_arena_set_allocated_head(
    ::com::Head* head) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.TestMsg.head)
}
inline ::com::Head* TestMsg::release_head() {
  
  ::com::Head* temp = head_;
  head_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::Head* TestMsg::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:com.TestMsg.head)
  
  ::com::Head* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::com::Head* TestMsg::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::Head>(GetArena());
    head_ = p;
  }
  return head_;
}
inline ::com::Head* TestMsg::mutable_head() {
  // @@protoc_insertion_point(field_mutable:com.TestMsg.head)
  return _internal_mutable_head();
}
inline void TestMsg::set_allocated_head(::com::Head* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:com.TestMsg.head)
}

// .google.protobuf.Any body = 2;
inline bool TestMsg::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool TestMsg::has_body() const {
  return _internal_has_body();
}
inline const PROTOBUF_NAMESPACE_ID::Any& TestMsg::_internal_body() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TestMsg::body() const {
  // @@protoc_insertion_point(field_get:com.TestMsg.body)
  return _internal_body();
}
inline void TestMsg::unsafe_arena_set_allocated_body(
    PROTOBUF_NAMESPACE_ID::Any* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.TestMsg.body)
}
inline PROTOBUF_NAMESPACE_ID::Any* TestMsg::release_body() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TestMsg::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:com.TestMsg.body)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TestMsg::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    body_ = p;
  }
  return body_;
}
inline PROTOBUF_NAMESPACE_ID::Any* TestMsg::mutable_body() {
  // @@protoc_insertion_point(field_mutable:com.TestMsg.body)
  return _internal_mutable_body();
}
inline void TestMsg::set_allocated_body(PROTOBUF_NAMESPACE_ID::Any* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body)->GetArena();
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:com.TestMsg.body)
}

// -------------------------------------------------------------------

// Head

// string uri = 1;
inline void Head::clear_uri() {
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Head::uri() const {
  // @@protoc_insertion_point(field_get:com.Head.uri)
  return _internal_uri();
}
inline void Head::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:com.Head.uri)
}
inline std::string* Head::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:com.Head.uri)
  return _internal_mutable_uri();
}
inline const std::string& Head::_internal_uri() const {
  return uri_.Get();
}
inline void Head::_internal_set_uri(const std::string& value) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Head::set_uri(std::string&& value) {
  
  uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.Head.uri)
}
inline void Head::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.Head.uri)
}
inline void Head::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.Head.uri)
}
inline std::string* Head::_internal_mutable_uri() {
  
  return uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Head::release_uri() {
  // @@protoc_insertion_point(field_release:com.Head.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Head::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.Head.uri)
}

// string token = 2;
inline void Head::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Head::token() const {
  // @@protoc_insertion_point(field_get:com.Head.token)
  return _internal_token();
}
inline void Head::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:com.Head.token)
}
inline std::string* Head::mutable_token() {
  // @@protoc_insertion_point(field_mutable:com.Head.token)
  return _internal_mutable_token();
}
inline const std::string& Head::_internal_token() const {
  return token_.Get();
}
inline void Head::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Head::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.Head.token)
}
inline void Head::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.Head.token)
}
inline void Head::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.Head.token)
}
inline std::string* Head::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Head::release_token() {
  // @@protoc_insertion_point(field_release:com.Head.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Head::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.Head.token)
}

// string err = 3;
inline void Head::clear_err() {
  err_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Head::err() const {
  // @@protoc_insertion_point(field_get:com.Head.err)
  return _internal_err();
}
inline void Head::set_err(const std::string& value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:com.Head.err)
}
inline std::string* Head::mutable_err() {
  // @@protoc_insertion_point(field_mutable:com.Head.err)
  return _internal_mutable_err();
}
inline const std::string& Head::_internal_err() const {
  return err_.Get();
}
inline void Head::_internal_set_err(const std::string& value) {
  
  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Head::set_err(std::string&& value) {
  
  err_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.Head.err)
}
inline void Head::set_err(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.Head.err)
}
inline void Head::set_err(const char* value,
    size_t size) {
  
  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.Head.err)
}
inline std::string* Head::_internal_mutable_err() {
  
  return err_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Head::release_err() {
  // @@protoc_insertion_point(field_release:com.Head.err)
  return err_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Head::set_allocated_err(std::string* err) {
  if (err != nullptr) {
    
  } else {
    
  }
  err_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.Head.err)
}

// fixed32 len = 4;
inline void Head::clear_len() {
  len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Head::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Head::len() const {
  // @@protoc_insertion_point(field_get:com.Head.len)
  return _internal_len();
}
inline void Head::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  len_ = value;
}
inline void Head::set_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:com.Head.len)
}

// fixed32 serial = 5;
inline void Head::clear_serial() {
  serial_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Head::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Head::serial() const {
  // @@protoc_insertion_point(field_get:com.Head.serial)
  return _internal_serial();
}
inline void Head::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  serial_ = value;
}
inline void Head::set_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:com.Head.serial)
}

// fixed64 context = 6;
inline void Head::clear_context() {
  context_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Head::_internal_context() const {
  return context_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Head::context() const {
  // @@protoc_insertion_point(field_get:com.Head.context)
  return _internal_context();
}
inline void Head::_internal_set_context(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  context_ = value;
}
inline void Head::set_context(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:com.Head.context)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_2eproto
