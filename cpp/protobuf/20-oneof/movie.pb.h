// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: movie.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_movie_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_movie_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_movie_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_movie_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_movie_2eproto;
namespace movie {
class BasicInfo;
class BasicInfoDefaultTypeInternal;
extern BasicInfoDefaultTypeInternal _BasicInfo_default_instance_;
class HelloMessages;
class HelloMessagesDefaultTypeInternal;
extern HelloMessagesDefaultTypeInternal _HelloMessages_default_instance_;
class MovieInfoRequest;
class MovieInfoRequestDefaultTypeInternal;
extern MovieInfoRequestDefaultTypeInternal _MovieInfoRequest_default_instance_;
class MovieInfoResponse;
class MovieInfoResponseDefaultTypeInternal;
extern MovieInfoResponseDefaultTypeInternal _MovieInfoResponse_default_instance_;
class Score;
class ScoreDefaultTypeInternal;
extern ScoreDefaultTypeInternal _Score_default_instance_;
}  // namespace movie
PROTOBUF_NAMESPACE_OPEN
template<> ::movie::BasicInfo* Arena::CreateMaybeMessage<::movie::BasicInfo>(Arena*);
template<> ::movie::HelloMessages* Arena::CreateMaybeMessage<::movie::HelloMessages>(Arena*);
template<> ::movie::MovieInfoRequest* Arena::CreateMaybeMessage<::movie::MovieInfoRequest>(Arena*);
template<> ::movie::MovieInfoResponse* Arena::CreateMaybeMessage<::movie::MovieInfoResponse>(Arena*);
template<> ::movie::Score* Arena::CreateMaybeMessage<::movie::Score>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace movie {

enum MovieType : int {
  humor = 0,
  science = 1,
  love = 2,
  other = 3,
  MovieType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MovieType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MovieType_IsValid(int value);
constexpr MovieType MovieType_MIN = humor;
constexpr MovieType MovieType_MAX = other;
constexpr int MovieType_ARRAYSIZE = MovieType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovieType_descriptor();
template<typename T>
inline const std::string& MovieType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MovieType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MovieType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MovieType_descriptor(), enum_t_value);
}
inline bool MovieType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MovieType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MovieType>(
    MovieType_descriptor(), name, value);
}
// ===================================================================

class HelloMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:movie.HelloMessages) */ {
 public:
  inline HelloMessages() : HelloMessages(nullptr) {}
  virtual ~HelloMessages();

  HelloMessages(const HelloMessages& from);
  HelloMessages(HelloMessages&& from) noexcept
    : HelloMessages() {
    *this = ::std::move(from);
  }

  inline HelloMessages& operator=(const HelloMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloMessages& operator=(HelloMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloMessages& default_instance();

  enum WorldMessageCase {
    kMovieInfoRequest = 1,
    kMovieInfoResponse = 2,
    WORLDMESSAGE_NOT_SET = 0,
  };

  static inline const HelloMessages* internal_default_instance() {
    return reinterpret_cast<const HelloMessages*>(
               &_HelloMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloMessages& a, HelloMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloMessages* New() const final {
    return CreateMaybeMessage<HelloMessages>(nullptr);
  }

  HelloMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloMessages& from);
  void MergeFrom(const HelloMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "movie.HelloMessages";
  }
  protected:
  explicit HelloMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_movie_2eproto);
    return ::descriptor_table_movie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovieInfoRequestFieldNumber = 1,
    kMovieInfoResponseFieldNumber = 2,
  };
  // .movie.MovieInfoRequest movie_info_request = 1;
  bool has_movie_info_request() const;
  private:
  bool _internal_has_movie_info_request() const;
  public:
  void clear_movie_info_request();
  const ::movie::MovieInfoRequest& movie_info_request() const;
  ::movie::MovieInfoRequest* release_movie_info_request();
  ::movie::MovieInfoRequest* mutable_movie_info_request();
  void set_allocated_movie_info_request(::movie::MovieInfoRequest* movie_info_request);
  private:
  const ::movie::MovieInfoRequest& _internal_movie_info_request() const;
  ::movie::MovieInfoRequest* _internal_mutable_movie_info_request();
  public:
  void unsafe_arena_set_allocated_movie_info_request(
      ::movie::MovieInfoRequest* movie_info_request);
  ::movie::MovieInfoRequest* unsafe_arena_release_movie_info_request();

  // .movie.MovieInfoResponse movie_info_response = 2;
  bool has_movie_info_response() const;
  private:
  bool _internal_has_movie_info_response() const;
  public:
  void clear_movie_info_response();
  const ::movie::MovieInfoResponse& movie_info_response() const;
  ::movie::MovieInfoResponse* release_movie_info_response();
  ::movie::MovieInfoResponse* mutable_movie_info_response();
  void set_allocated_movie_info_response(::movie::MovieInfoResponse* movie_info_response);
  private:
  const ::movie::MovieInfoResponse& _internal_movie_info_response() const;
  ::movie::MovieInfoResponse* _internal_mutable_movie_info_response();
  public:
  void unsafe_arena_set_allocated_movie_info_response(
      ::movie::MovieInfoResponse* movie_info_response);
  ::movie::MovieInfoResponse* unsafe_arena_release_movie_info_response();

  void clear_WorldMessage();
  WorldMessageCase WorldMessage_case() const;
  // @@protoc_insertion_point(class_scope:movie.HelloMessages)
 private:
  class _Internal;
  void set_has_movie_info_request();
  void set_has_movie_info_response();

  inline bool has_WorldMessage() const;
  inline void clear_has_WorldMessage();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union WorldMessageUnion {
    WorldMessageUnion() {}
    ::movie::MovieInfoRequest* movie_info_request_;
    ::movie::MovieInfoResponse* movie_info_response_;
  } WorldMessage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_movie_2eproto;
};
// -------------------------------------------------------------------

class Score PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:movie.Score) */ {
 public:
  inline Score() : Score(nullptr) {}
  virtual ~Score();

  Score(const Score& from);
  Score(Score&& from) noexcept
    : Score() {
    *this = ::std::move(from);
  }

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }
  inline Score& operator=(Score&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Score& default_instance();

  static inline const Score* internal_default_instance() {
    return reinterpret_cast<const Score*>(
               &_Score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Score& a, Score& b) {
    a.Swap(&b);
  }
  inline void Swap(Score* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Score* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Score* New() const final {
    return CreateMaybeMessage<Score>(nullptr);
  }

  Score* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Score>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Score& from);
  void MergeFrom(const Score& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Score* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "movie.Score";
  }
  protected:
  explicit Score(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_movie_2eproto);
    return ::descriptor_table_movie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string comment = 2;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:movie.Score)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_movie_2eproto;
};
// -------------------------------------------------------------------

class BasicInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:movie.BasicInfo) */ {
 public:
  inline BasicInfo() : BasicInfo(nullptr) {}
  virtual ~BasicInfo();

  BasicInfo(const BasicInfo& from);
  BasicInfo(BasicInfo&& from) noexcept
    : BasicInfo() {
    *this = ::std::move(from);
  }

  inline BasicInfo& operator=(const BasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicInfo& operator=(BasicInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicInfo& default_instance();

  static inline const BasicInfo* internal_default_instance() {
    return reinterpret_cast<const BasicInfo*>(
               &_BasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BasicInfo& a, BasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicInfo* New() const final {
    return CreateMaybeMessage<BasicInfo>(nullptr);
  }

  BasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicInfo& from);
  void MergeFrom(const BasicInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "movie.BasicInfo";
  }
  protected:
  explicit BasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_movie_2eproto);
    return ::descriptor_table_movie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectorsFieldNumber = 2,
    kMovieTypeFieldNumber = 1,
  };
  // repeated string directors = 2;
  int directors_size() const;
  private:
  int _internal_directors_size() const;
  public:
  void clear_directors();
  const std::string& directors(int index) const;
  std::string* mutable_directors(int index);
  void set_directors(int index, const std::string& value);
  void set_directors(int index, std::string&& value);
  void set_directors(int index, const char* value);
  void set_directors(int index, const char* value, size_t size);
  std::string* add_directors();
  void add_directors(const std::string& value);
  void add_directors(std::string&& value);
  void add_directors(const char* value);
  void add_directors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& directors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_directors();
  private:
  const std::string& _internal_directors(int index) const;
  std::string* _internal_add_directors();
  public:

  // .movie.MovieType movie_type = 1;
  void clear_movie_type();
  ::movie::MovieType movie_type() const;
  void set_movie_type(::movie::MovieType value);
  private:
  ::movie::MovieType _internal_movie_type() const;
  void _internal_set_movie_type(::movie::MovieType value);
  public:

  // @@protoc_insertion_point(class_scope:movie.BasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> directors_;
  int movie_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_movie_2eproto;
};
// -------------------------------------------------------------------

class MovieInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:movie.MovieInfoRequest) */ {
 public:
  inline MovieInfoRequest() : MovieInfoRequest(nullptr) {}
  virtual ~MovieInfoRequest();

  MovieInfoRequest(const MovieInfoRequest& from);
  MovieInfoRequest(MovieInfoRequest&& from) noexcept
    : MovieInfoRequest() {
    *this = ::std::move(from);
  }

  inline MovieInfoRequest& operator=(const MovieInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieInfoRequest& operator=(MovieInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovieInfoRequest& default_instance();

  static inline const MovieInfoRequest* internal_default_instance() {
    return reinterpret_cast<const MovieInfoRequest*>(
               &_MovieInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MovieInfoRequest& a, MovieInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovieInfoRequest* New() const final {
    return CreateMaybeMessage<MovieInfoRequest>(nullptr);
  }

  MovieInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovieInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovieInfoRequest& from);
  void MergeFrom(const MovieInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "movie.MovieInfoRequest";
  }
  protected:
  explicit MovieInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_movie_2eproto);
    return ::descriptor_table_movie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:movie.MovieInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_movie_2eproto;
};
// -------------------------------------------------------------------

class MovieInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:movie.MovieInfoResponse) */ {
 public:
  inline MovieInfoResponse() : MovieInfoResponse(nullptr) {}
  virtual ~MovieInfoResponse();

  MovieInfoResponse(const MovieInfoResponse& from);
  MovieInfoResponse(MovieInfoResponse&& from) noexcept
    : MovieInfoResponse() {
    *this = ::std::move(from);
  }

  inline MovieInfoResponse& operator=(const MovieInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovieInfoResponse& operator=(MovieInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovieInfoResponse& default_instance();

  static inline const MovieInfoResponse* internal_default_instance() {
    return reinterpret_cast<const MovieInfoResponse*>(
               &_MovieInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MovieInfoResponse& a, MovieInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MovieInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovieInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovieInfoResponse* New() const final {
    return CreateMaybeMessage<MovieInfoResponse>(nullptr);
  }

  MovieInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovieInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovieInfoResponse& from);
  void MergeFrom(const MovieInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovieInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "movie.MovieInfoResponse";
  }
  protected:
  explicit MovieInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_movie_2eproto);
    return ::descriptor_table_movie_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreItemsFieldNumber = 3,
    kNameFieldNumber = 1,
    kBasicInfoFieldNumber = 2,
  };
  // repeated .movie.Score score_items = 3;
  int score_items_size() const;
  private:
  int _internal_score_items_size() const;
  public:
  void clear_score_items();
  ::movie::Score* mutable_score_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::movie::Score >*
      mutable_score_items();
  private:
  const ::movie::Score& _internal_score_items(int index) const;
  ::movie::Score* _internal_add_score_items();
  public:
  const ::movie::Score& score_items(int index) const;
  ::movie::Score* add_score_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::movie::Score >&
      score_items() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .movie.BasicInfo basic_info = 2;
  bool has_basic_info() const;
  private:
  bool _internal_has_basic_info() const;
  public:
  void clear_basic_info();
  const ::movie::BasicInfo& basic_info() const;
  ::movie::BasicInfo* release_basic_info();
  ::movie::BasicInfo* mutable_basic_info();
  void set_allocated_basic_info(::movie::BasicInfo* basic_info);
  private:
  const ::movie::BasicInfo& _internal_basic_info() const;
  ::movie::BasicInfo* _internal_mutable_basic_info();
  public:
  void unsafe_arena_set_allocated_basic_info(
      ::movie::BasicInfo* basic_info);
  ::movie::BasicInfo* unsafe_arena_release_basic_info();

  // @@protoc_insertion_point(class_scope:movie.MovieInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::movie::Score > score_items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::movie::BasicInfo* basic_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_movie_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloMessages

// .movie.MovieInfoRequest movie_info_request = 1;
inline bool HelloMessages::_internal_has_movie_info_request() const {
  return WorldMessage_case() == kMovieInfoRequest;
}
inline bool HelloMessages::has_movie_info_request() const {
  return _internal_has_movie_info_request();
}
inline void HelloMessages::set_has_movie_info_request() {
  _oneof_case_[0] = kMovieInfoRequest;
}
inline void HelloMessages::clear_movie_info_request() {
  if (_internal_has_movie_info_request()) {
    if (GetArena() == nullptr) {
      delete WorldMessage_.movie_info_request_;
    }
    clear_has_WorldMessage();
  }
}
inline ::movie::MovieInfoRequest* HelloMessages::release_movie_info_request() {
  // @@protoc_insertion_point(field_release:movie.HelloMessages.movie_info_request)
  if (_internal_has_movie_info_request()) {
    clear_has_WorldMessage();
      ::movie::MovieInfoRequest* temp = WorldMessage_.movie_info_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    WorldMessage_.movie_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::movie::MovieInfoRequest& HelloMessages::_internal_movie_info_request() const {
  return _internal_has_movie_info_request()
      ? *WorldMessage_.movie_info_request_
      : reinterpret_cast< ::movie::MovieInfoRequest&>(::movie::_MovieInfoRequest_default_instance_);
}
inline const ::movie::MovieInfoRequest& HelloMessages::movie_info_request() const {
  // @@protoc_insertion_point(field_get:movie.HelloMessages.movie_info_request)
  return _internal_movie_info_request();
}
inline ::movie::MovieInfoRequest* HelloMessages::unsafe_arena_release_movie_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:movie.HelloMessages.movie_info_request)
  if (_internal_has_movie_info_request()) {
    clear_has_WorldMessage();
    ::movie::MovieInfoRequest* temp = WorldMessage_.movie_info_request_;
    WorldMessage_.movie_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HelloMessages::unsafe_arena_set_allocated_movie_info_request(::movie::MovieInfoRequest* movie_info_request) {
  clear_WorldMessage();
  if (movie_info_request) {
    set_has_movie_info_request();
    WorldMessage_.movie_info_request_ = movie_info_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:movie.HelloMessages.movie_info_request)
}
inline ::movie::MovieInfoRequest* HelloMessages::_internal_mutable_movie_info_request() {
  if (!_internal_has_movie_info_request()) {
    clear_WorldMessage();
    set_has_movie_info_request();
    WorldMessage_.movie_info_request_ = CreateMaybeMessage< ::movie::MovieInfoRequest >(GetArena());
  }
  return WorldMessage_.movie_info_request_;
}
inline ::movie::MovieInfoRequest* HelloMessages::mutable_movie_info_request() {
  // @@protoc_insertion_point(field_mutable:movie.HelloMessages.movie_info_request)
  return _internal_mutable_movie_info_request();
}

// .movie.MovieInfoResponse movie_info_response = 2;
inline bool HelloMessages::_internal_has_movie_info_response() const {
  return WorldMessage_case() == kMovieInfoResponse;
}
inline bool HelloMessages::has_movie_info_response() const {
  return _internal_has_movie_info_response();
}
inline void HelloMessages::set_has_movie_info_response() {
  _oneof_case_[0] = kMovieInfoResponse;
}
inline void HelloMessages::clear_movie_info_response() {
  if (_internal_has_movie_info_response()) {
    if (GetArena() == nullptr) {
      delete WorldMessage_.movie_info_response_;
    }
    clear_has_WorldMessage();
  }
}
inline ::movie::MovieInfoResponse* HelloMessages::release_movie_info_response() {
  // @@protoc_insertion_point(field_release:movie.HelloMessages.movie_info_response)
  if (_internal_has_movie_info_response()) {
    clear_has_WorldMessage();
      ::movie::MovieInfoResponse* temp = WorldMessage_.movie_info_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    WorldMessage_.movie_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::movie::MovieInfoResponse& HelloMessages::_internal_movie_info_response() const {
  return _internal_has_movie_info_response()
      ? *WorldMessage_.movie_info_response_
      : reinterpret_cast< ::movie::MovieInfoResponse&>(::movie::_MovieInfoResponse_default_instance_);
}
inline const ::movie::MovieInfoResponse& HelloMessages::movie_info_response() const {
  // @@protoc_insertion_point(field_get:movie.HelloMessages.movie_info_response)
  return _internal_movie_info_response();
}
inline ::movie::MovieInfoResponse* HelloMessages::unsafe_arena_release_movie_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:movie.HelloMessages.movie_info_response)
  if (_internal_has_movie_info_response()) {
    clear_has_WorldMessage();
    ::movie::MovieInfoResponse* temp = WorldMessage_.movie_info_response_;
    WorldMessage_.movie_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HelloMessages::unsafe_arena_set_allocated_movie_info_response(::movie::MovieInfoResponse* movie_info_response) {
  clear_WorldMessage();
  if (movie_info_response) {
    set_has_movie_info_response();
    WorldMessage_.movie_info_response_ = movie_info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:movie.HelloMessages.movie_info_response)
}
inline ::movie::MovieInfoResponse* HelloMessages::_internal_mutable_movie_info_response() {
  if (!_internal_has_movie_info_response()) {
    clear_WorldMessage();
    set_has_movie_info_response();
    WorldMessage_.movie_info_response_ = CreateMaybeMessage< ::movie::MovieInfoResponse >(GetArena());
  }
  return WorldMessage_.movie_info_response_;
}
inline ::movie::MovieInfoResponse* HelloMessages::mutable_movie_info_response() {
  // @@protoc_insertion_point(field_mutable:movie.HelloMessages.movie_info_response)
  return _internal_mutable_movie_info_response();
}

inline bool HelloMessages::has_WorldMessage() const {
  return WorldMessage_case() != WORLDMESSAGE_NOT_SET;
}
inline void HelloMessages::clear_has_WorldMessage() {
  _oneof_case_[0] = WORLDMESSAGE_NOT_SET;
}
inline HelloMessages::WorldMessageCase HelloMessages::WorldMessage_case() const {
  return HelloMessages::WorldMessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Score

// int32 value = 1;
inline void Score::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Score::value() const {
  // @@protoc_insertion_point(field_get:movie.Score.value)
  return _internal_value();
}
inline void Score::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void Score::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:movie.Score.value)
}

// string comment = 2;
inline void Score::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Score::comment() const {
  // @@protoc_insertion_point(field_get:movie.Score.comment)
  return _internal_comment();
}
inline void Score::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:movie.Score.comment)
}
inline std::string* Score::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:movie.Score.comment)
  return _internal_mutable_comment();
}
inline const std::string& Score::_internal_comment() const {
  return comment_.Get();
}
inline void Score::_internal_set_comment(const std::string& value) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Score::set_comment(std::string&& value) {
  
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:movie.Score.comment)
}
inline void Score::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:movie.Score.comment)
}
inline void Score::set_comment(const char* value,
    size_t size) {
  
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:movie.Score.comment)
}
inline std::string* Score::_internal_mutable_comment() {
  
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Score::release_comment() {
  // @@protoc_insertion_point(field_release:movie.Score.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Score::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:movie.Score.comment)
}

// -------------------------------------------------------------------

// BasicInfo

// .movie.MovieType movie_type = 1;
inline void BasicInfo::clear_movie_type() {
  movie_type_ = 0;
}
inline ::movie::MovieType BasicInfo::_internal_movie_type() const {
  return static_cast< ::movie::MovieType >(movie_type_);
}
inline ::movie::MovieType BasicInfo::movie_type() const {
  // @@protoc_insertion_point(field_get:movie.BasicInfo.movie_type)
  return _internal_movie_type();
}
inline void BasicInfo::_internal_set_movie_type(::movie::MovieType value) {
  
  movie_type_ = value;
}
inline void BasicInfo::set_movie_type(::movie::MovieType value) {
  _internal_set_movie_type(value);
  // @@protoc_insertion_point(field_set:movie.BasicInfo.movie_type)
}

// repeated string directors = 2;
inline int BasicInfo::_internal_directors_size() const {
  return directors_.size();
}
inline int BasicInfo::directors_size() const {
  return _internal_directors_size();
}
inline void BasicInfo::clear_directors() {
  directors_.Clear();
}
inline std::string* BasicInfo::add_directors() {
  // @@protoc_insertion_point(field_add_mutable:movie.BasicInfo.directors)
  return _internal_add_directors();
}
inline const std::string& BasicInfo::_internal_directors(int index) const {
  return directors_.Get(index);
}
inline const std::string& BasicInfo::directors(int index) const {
  // @@protoc_insertion_point(field_get:movie.BasicInfo.directors)
  return _internal_directors(index);
}
inline std::string* BasicInfo::mutable_directors(int index) {
  // @@protoc_insertion_point(field_mutable:movie.BasicInfo.directors)
  return directors_.Mutable(index);
}
inline void BasicInfo::set_directors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:movie.BasicInfo.directors)
  directors_.Mutable(index)->assign(value);
}
inline void BasicInfo::set_directors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:movie.BasicInfo.directors)
  directors_.Mutable(index)->assign(std::move(value));
}
inline void BasicInfo::set_directors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  directors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:movie.BasicInfo.directors)
}
inline void BasicInfo::set_directors(int index, const char* value, size_t size) {
  directors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:movie.BasicInfo.directors)
}
inline std::string* BasicInfo::_internal_add_directors() {
  return directors_.Add();
}
inline void BasicInfo::add_directors(const std::string& value) {
  directors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:movie.BasicInfo.directors)
}
inline void BasicInfo::add_directors(std::string&& value) {
  directors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:movie.BasicInfo.directors)
}
inline void BasicInfo::add_directors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  directors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:movie.BasicInfo.directors)
}
inline void BasicInfo::add_directors(const char* value, size_t size) {
  directors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:movie.BasicInfo.directors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BasicInfo::directors() const {
  // @@protoc_insertion_point(field_list:movie.BasicInfo.directors)
  return directors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BasicInfo::mutable_directors() {
  // @@protoc_insertion_point(field_mutable_list:movie.BasicInfo.directors)
  return &directors_;
}

// -------------------------------------------------------------------

// MovieInfoRequest

// string name = 1;
inline void MovieInfoRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MovieInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:movie.MovieInfoRequest.name)
  return _internal_name();
}
inline void MovieInfoRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:movie.MovieInfoRequest.name)
}
inline std::string* MovieInfoRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:movie.MovieInfoRequest.name)
  return _internal_mutable_name();
}
inline const std::string& MovieInfoRequest::_internal_name() const {
  return name_.Get();
}
inline void MovieInfoRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MovieInfoRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:movie.MovieInfoRequest.name)
}
inline void MovieInfoRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:movie.MovieInfoRequest.name)
}
inline void MovieInfoRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:movie.MovieInfoRequest.name)
}
inline std::string* MovieInfoRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MovieInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:movie.MovieInfoRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MovieInfoRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:movie.MovieInfoRequest.name)
}

// -------------------------------------------------------------------

// MovieInfoResponse

// string name = 1;
inline void MovieInfoResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MovieInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:movie.MovieInfoResponse.name)
  return _internal_name();
}
inline void MovieInfoResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:movie.MovieInfoResponse.name)
}
inline std::string* MovieInfoResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:movie.MovieInfoResponse.name)
  return _internal_mutable_name();
}
inline const std::string& MovieInfoResponse::_internal_name() const {
  return name_.Get();
}
inline void MovieInfoResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MovieInfoResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:movie.MovieInfoResponse.name)
}
inline void MovieInfoResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:movie.MovieInfoResponse.name)
}
inline void MovieInfoResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:movie.MovieInfoResponse.name)
}
inline std::string* MovieInfoResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MovieInfoResponse::release_name() {
  // @@protoc_insertion_point(field_release:movie.MovieInfoResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MovieInfoResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:movie.MovieInfoResponse.name)
}

// .movie.BasicInfo basic_info = 2;
inline bool MovieInfoResponse::_internal_has_basic_info() const {
  return this != internal_default_instance() && basic_info_ != nullptr;
}
inline bool MovieInfoResponse::has_basic_info() const {
  return _internal_has_basic_info();
}
inline void MovieInfoResponse::clear_basic_info() {
  if (GetArena() == nullptr && basic_info_ != nullptr) {
    delete basic_info_;
  }
  basic_info_ = nullptr;
}
inline const ::movie::BasicInfo& MovieInfoResponse::_internal_basic_info() const {
  const ::movie::BasicInfo* p = basic_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::movie::BasicInfo&>(
      ::movie::_BasicInfo_default_instance_);
}
inline const ::movie::BasicInfo& MovieInfoResponse::basic_info() const {
  // @@protoc_insertion_point(field_get:movie.MovieInfoResponse.basic_info)
  return _internal_basic_info();
}
inline void MovieInfoResponse::unsafe_arena_set_allocated_basic_info(
    ::movie::BasicInfo* basic_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basic_info_);
  }
  basic_info_ = basic_info;
  if (basic_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:movie.MovieInfoResponse.basic_info)
}
inline ::movie::BasicInfo* MovieInfoResponse::release_basic_info() {
  
  ::movie::BasicInfo* temp = basic_info_;
  basic_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::movie::BasicInfo* MovieInfoResponse::unsafe_arena_release_basic_info() {
  // @@protoc_insertion_point(field_release:movie.MovieInfoResponse.basic_info)
  
  ::movie::BasicInfo* temp = basic_info_;
  basic_info_ = nullptr;
  return temp;
}
inline ::movie::BasicInfo* MovieInfoResponse::_internal_mutable_basic_info() {
  
  if (basic_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::movie::BasicInfo>(GetArena());
    basic_info_ = p;
  }
  return basic_info_;
}
inline ::movie::BasicInfo* MovieInfoResponse::mutable_basic_info() {
  // @@protoc_insertion_point(field_mutable:movie.MovieInfoResponse.basic_info)
  return _internal_mutable_basic_info();
}
inline void MovieInfoResponse::set_allocated_basic_info(::movie::BasicInfo* basic_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basic_info_;
  }
  if (basic_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basic_info);
    if (message_arena != submessage_arena) {
      basic_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic_info, submessage_arena);
    }
    
  } else {
    
  }
  basic_info_ = basic_info;
  // @@protoc_insertion_point(field_set_allocated:movie.MovieInfoResponse.basic_info)
}

// repeated .movie.Score score_items = 3;
inline int MovieInfoResponse::_internal_score_items_size() const {
  return score_items_.size();
}
inline int MovieInfoResponse::score_items_size() const {
  return _internal_score_items_size();
}
inline void MovieInfoResponse::clear_score_items() {
  score_items_.Clear();
}
inline ::movie::Score* MovieInfoResponse::mutable_score_items(int index) {
  // @@protoc_insertion_point(field_mutable:movie.MovieInfoResponse.score_items)
  return score_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::movie::Score >*
MovieInfoResponse::mutable_score_items() {
  // @@protoc_insertion_point(field_mutable_list:movie.MovieInfoResponse.score_items)
  return &score_items_;
}
inline const ::movie::Score& MovieInfoResponse::_internal_score_items(int index) const {
  return score_items_.Get(index);
}
inline const ::movie::Score& MovieInfoResponse::score_items(int index) const {
  // @@protoc_insertion_point(field_get:movie.MovieInfoResponse.score_items)
  return _internal_score_items(index);
}
inline ::movie::Score* MovieInfoResponse::_internal_add_score_items() {
  return score_items_.Add();
}
inline ::movie::Score* MovieInfoResponse::add_score_items() {
  // @@protoc_insertion_point(field_add:movie.MovieInfoResponse.score_items)
  return _internal_add_score_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::movie::Score >&
MovieInfoResponse::score_items() const {
  // @@protoc_insertion_point(field_list:movie.MovieInfoResponse.score_items)
  return score_items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace movie

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::movie::MovieType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::movie::MovieType>() {
  return ::movie::MovieType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_movie_2eproto
